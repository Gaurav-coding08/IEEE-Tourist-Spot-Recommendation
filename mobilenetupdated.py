# -*- coding: utf-8 -*-
"""mobilenetUPDATED.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1apPdDLQnHR1wDE4Mwt_0Jdb9K-Nq0Spo
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import tensorflow as tf 
from tensorflow import keras 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Activation,Dense,Flatten,BatchNormalization,Conv2D
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.metrics import categorical_crossentropy
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.metrics import confusion_matrix
import itertools
import os
import shutil
import random
import glob
import matplotlib.pyplot as plt 
import warnings
warnings.simplefilter(action='ignore',category=FutureWarning)
# %matplotlib inline

!python --version

-nvidea

from tensorflow.keras.layers import MaxPool2D

train_path='/content/drive/MyDrive/trainnew'
test_path ='/content/drive/MyDrive/testnew' 
val_path = '/content/drive/MyDrive/validationnew'

train_batches = ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet.preprocess_input ).flow_from_directory(directory=train_path,target_size=(224,224),classes=['below18','18to45','above45'],batch_size=64)
test_batches = ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet.preprocess_input ).flow_from_directory(directory=test_path,target_size=(224,224),classes=['below18','18to45','above45'],batch_size=64,shuffle=False)
val_batches = ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet.preprocess_input ).flow_from_directory(directory=val_path,target_size=(224,224),classes=['below18','18to45','above45'],batch_size=64,shuffle=False)

train_datagen = ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet.preprocess_input,rescale = 1./255., rotation_range = 40, width_shift_range = 0.2, height_shift_range = 0.2, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)
val_datagen =  ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet.preprocess_input,rescale = 1./255., rotation_range = 40, width_shift_range = 0.2, height_shift_range = 0.2, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True)
test_datagen = ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet.preprocess_input,rescale = 1.0/255.)

train_generator = train_datagen.flow_from_directory(train_path, batch_size = 32, classes=['below18','18to45','above45'], target_size = (224, 224))
val_generator =val_datagen.flow_from_directory(val_path, batch_size = 32, classes=['below18','18to45','above45'], target_size = (224, 224))
test_generator = test_datagen.flow_from_directory( test_path, batch_size = 32,classes=['below18','18to45','above45'], target_size = (224, 224))

base_model = tf.keras.applications.MobileNet(input_shape = (224, 224, 3),pooling=None, include_top = False, weights = 'imagenet')

base_model.summary()

last_few_layers = 10

del model

sum=0

for l in base_model.layers:
    sum=sum+1 
print(sum)

for layer in base_model.layers[:76]:
    layer.trainable = False

sum=0

for l in base_model.layers:
    print(l.name, l.trainable)
    sum=sum+1
print(sum)

#for layer in base_model.layers:
    layer.trainable = True

from tensorflow.keras.optimizers import Adam
from tensorflow.keras import layers
x = layers.Flatten()(base_model.output)
x = layers.Dense(1024, activation='relu')(x)
x = layers.Dropout(0.2)(x)

# Add a final softmax layer with 3 node for classification output
x = layers.Dense(3, activation='softmax')(x)

model = tf.keras.models.Model(base_model.input, x)

model.compile(optimizer = Adam(lr=0.0001), loss = 'categorical_crossentropy', metrics = ['acc'])

my_callbacks = [
    tf.keras.callbacks.ModelCheckpoint(filepath='/content/drive/MyDrive/modelmobilenetUPDATED.{epoch:02d}.h5'),
    tf.keras.callbacks.TensorBoard(log_dir='./drive/MyDrive/modelmobilenetUPDATEDlogs'),
]

del model2

model2 = tf.keras.models.load_model('/content/drive/MyDrive/modelmobilenetUPDATED.05.h5') 81.93 val

model3= tf.keras.models.load_model('/content/drive/MyDrive/modelmobilenetUPDATED.01.h5')

model.fit_generator(train_batches,validation_data=val_batches,steps_per_epoch =199,epochs =5,callbacks=my_callbacks)

predictions = model33.predict(x=test_batches,verbose=0)

import torch

path = '/content/drive/MyDrive/model2' 
torch.save(model2, path)

path = '/content/drive/MyDrive/modelMobileNetUpdated'
modelmobilenet=torch.load(path)

cm = confusion_matrix(y_true=test_batches.classes,y_pred=np.argmax(predictions,axis=-1))

test_batches.class_indices

from sklearn.datasets import make_classification
from sklearn.metrics import plot_confusion_matrix

def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    print(cm)

    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, cm[i, j],
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')

cm_plot_labels = ['below 18','18to45','above 45']  
plot_confusion_matrix(cm=cm,classes=cm_plot_labels,title='Confusion matrix')

i=0
j=0
sum=0

p=cm[0][0]+cm[1][1]+cm[2][2]+cm[3][3]
for i in range(0,4):
  for j in range(0,4):
    sum=sum+cm[i][j]
accuracy=(p/sum)
print(sum)
print(accuracy)

train_path2='/content/drive/MyDrive/train_tourist'
test_path2 ='/content/drive/MyDrive/test_tourist'

train_batches2 = ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet.preprocess_input ).flow_from_directory(directory=train_path2,target_size=(224,224),classes=['ain dxb','atlantis','burj al arab','burj_khalifa'],batch_size=16)
test_batches2 = ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet.preprocess_input ).flow_from_directory(directory=test_path2,target_size=(224,224),classes=['ain dxb','atlantis','burj al arab','burj_khalifa'],batch_size=16,shuffle=False)

tourist_model = tf.keras.applications.MobileNet(input_shape = (224, 224, 3),pooling=None, include_top = False, weights = 'imagenet')

for layer in tourist_model.layers:
    layer.trainable = True

from tensorflow.keras.optimizers import Adam
from tensorflow.keras import layers
y = layers.Flatten()(tourist_model.output)
y = layers.Dense(1024, activation='relu')(y)
y = layers.Dropout(0.2)(y)

# Add a final softmax layer with 4 node for classification output
y= layers.Dense(4, activation='softmax')(y)

model2 = tf.keras.models.Model(tourist_model.input, y)

model2.compile(optimizer = Adam(lr=0.0001), loss = 'categorical_crossentropy', metrics = ['acc'])

my_callbacks = [
    tf.keras.callbacks.ModelCheckpoint(filepath='/content/drive/MyDrive/modelmobilenetnewtourist.{epoch:02d}.h5'),
    tf.keras.callbacks.TensorBoard(log_dir='./drive/MyDrive/modelmobilenetnewtourist/logs'),
]

model2.fit_generator(train_batches2,steps_per_epoch = 164, epochs =3,callbacks=my_callbacks)

predictions = model2.predict(x=test_batches2,verbose=0)

cm2 = confusion_matrix(y_true=test_batches2.classes,y_pred=np.argmax(predictions,axis=-1))

cm_plot_labels = ['ain dxb','atlantis','burj al arab','burj_khalifa']
plot_confusion_matrix(cm=cm2,classes=cm_plot_labels,title='Confusion matrix')

//AGE MODEL//

from tensorflow.keras.layers import MaxPool2D

from skimage.io import imread
img = imread('/content/gaurav_burj khalifa.jpg')

from skimage.transform import resize

img= resize(img,(224,224,3))

img=np.array(img,dtype=np.float32)
img= np.expand_dims(img,axis=0)

test_pred=modelmobilenet.predict(img)
y_pred=np.argmax(test_pred,axis=-1)
print(y_pred)

x=y_pred

////TOURIST MODEL//

model3= tf.keras.models.load_model('/content/drive/MyDrive/modelmobilenetnewtourist.03.h5')

from skimage.io import imread
img = imread('/content/gaurav_burj khalifa.jpg')

from skimage.transform import resize

img= resize(img,(224,224,3))

import cv2
image = cv2.imread('/content/gaurav_atlantis.jpg')
  
# Window name in which image is displayed
window_name = 'image'
  
# Using cv2.imshow() method 
# Displaying the image 
cv2.imshow(window_name, image)

img=np.array(img,dtype=np.float32)
img= np.expand_dims(img,axis=0)

test_pred=model3.predict(img)
x_pred=np.argmax(test_pred,axis=-1)
print(x_pred)

y=x_pred

print(y)

import random

if(x == 0):
  print('Detected Age Group is below 18') 
  if(y==0):
       print('Detected torist spot where you are currently standing infront of is AIN,DUBAI')
       print('If you liking a ferrous wheel then you would love to visit  Rock Republic climbing walls','Virtual Worlds Gaming','Global Village','Aquaventure Waterpark')
  elif(y == 1):
        print('Detected torist spot where you are currently standing infront of is ATLANTIS,DUBAI')
        print('If you liking Atlantis then you would love to visit Aquaventure Waterpark which is just inside Atlantis')
  elif(y == 2):
        print('Detected torist spot where you are currently standing infront of the best hotelin the world BURJ AL ARAB')
        print('If you are liking Burj Al Arab then you would love to visit Virtual Worlds Gaming')
  else: 
         print('Detected torist spot where you are currently standing infront of The world tallest building BURJ KHALIFA')
         print('If you liking Burj khalifa then you would love to visit Global Village')  
elif(x == 1):
  print('Detected Age Group is between 18 to 45') 
  if(y==0):
        print('Detected torist spot where you are currently standing infront of is AIN,DUBAI')
        print('If you liking a ferrous wheel then you would love to visit:') 
        print(random.choice(('Hysteria Haunted House','The GreenPlanet')))
  elif(y==1):
        print('Detected torist spot where you are currently standing infront of is ATLANTIS,DUBAI')
        print('If you liking Atlantis then you would love to visit:')
        print(random.choice(('Ski Dubai','Thrillzone Lasertag')))
  elif(y ==2):
        print('Detected torist spot where you are currently standing infront of the best hotelin the world BURJ AL ARAB')
        print('If you are liking Burj Al Arab then you would love to visit:')
        print(random.choice(('Rib SpeedBoat Sight','IMG','Ferrari World')))
  else: 
         print('Detected torist spot where you are currently standing infront of The world tallest building BURJ KHALIFA')
         print('If you liking Burj khalifa then you would love to visit :')
         print(random.choice(('Desert Safari','Dubaiframe','Bollywood Park DXB')))

else:
   print('Detected Age Group is above 45') 
   if (y == 0):
        print('Detected torist spot where you are currently standing infront of is AIN,DUBAI')
        print('If you liking a ferrous wheel then you would love to visit:') 
        print(random.choice(('Big Bus DXB Sightseeing Tour'.'Dubai Aquarium')))
   elif(y == 1):
        print('Detected torist spot where you are currently standing infront of is ATLANTIS,DUBAI')
        print('If you liking Atlantis then you would love to visit:')
        print('Lost Chambers Aquarium')
   elif(y == 2):
        print('Detected torist spot where you are currently standing infront of the best hotelin the world BURJ AL ARAB')
        print('If you are liking Burj Al Arab then you would love to visit:')
        print('Cruise Dinner')
   else: 
         print('Detected torist spot where you are currently standing infront of The world tallest building BURJ KHALIFA')
         print('If you liking Burj khalifa then you would love to visit :')
         print(random.choice(('DXB Museum')))