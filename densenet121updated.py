# -*- coding: utf-8 -*-
"""DenseNet121UPDATED.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1on4pYw2G0GYEwpfjD6rcoQgRZbBHyuTx
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import tensorflow as tf 
from tensorflow import keras 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Activation,Dense,Flatten,BatchNormalization,Conv2D
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.metrics import categorical_crossentropy
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.metrics import confusion_matrix
import itertools
import os
import shutil
import random
import glob
import matplotlib.pyplot as plt 
import warnings
warnings.simplefilter(action='ignore',category=FutureWarning)
# %matplotlib inline

from tensorflow.keras.layers import MaxPool2D

train_path='/content/drive/MyDrive/trainnew'
test_path ='/content/drive/MyDrive/testnew' 
val_path = '/content/drive/MyDrive/validationnew'

train_batches = ImageDataGenerator(preprocessing_function=tf.keras.applications.densenet.preprocess_input ).flow_from_directory(directory=train_path,target_size=(224,224),classes=['below18','18to45','above45'],batch_size=64)
test_batches = ImageDataGenerator(preprocessing_function=tf.keras.applications.densenet.preprocess_input ).flow_from_directory(directory=test_path,target_size=(224,224),classes=['below18','18to45','above45'],batch_size=64,shuffle=False)
val_batches = ImageDataGenerator(preprocessing_function=tf.keras.applications.densenet.preprocess_input  ).flow_from_directory(directory=val_path,target_size=(224,224),classes=['below18','18to45','above45'],batch_size=64,shuffle=False)

!nvidia-smi

base_model = tf.keras.applications.DenseNet121(input_shape = (224, 224, 3),pooling=None, include_top = False, weights = 'imagenet')

for layer in base_model.layers:
    layer.trainable = True

del base_model

sum=0

for l in base_model.layers:
    sum=sum+1 
print(sum)

last_few_layers = 10

for layer in base_model.layers[:417]:
    layer.trainable = False

sum=0

for l in model.layers:
    print(l.name, l.trainable)
    sum=sum+1
print(sum)

from tensorflow.keras.optimizers import Adam
from tensorflow.keras import layers
x = layers.Flatten()(base_model.output)
x = layers.Dense(1024, activation='relu')(x)
x = layers.Dropout(0.2)(x)

# Add a final softmax layer with 4 node for classification output
x = layers.Dense(3, activation='softmax')(x)

model = tf.keras.models.Model(base_model.input, x)

model.compile(optimizer = Adam(lr=0.0001), loss = 'categorical_crossentropy', metrics = ['acc'])

del model

my_callbacks = [
    tf.keras.callbacks.ModelCheckpoint(filepath='/content/drive/MyDrive/modeldensenet121updatedd{epoch:02d}.h5'),
    tf.keras.callbacks.TensorBoard(log_dir='./drive/MyDrive/modeldensenet121updatedd/logs'),
]

model3=model

model1 = tf.keras.models.load_model('/content/drive/MyDrive/modeldensenet121updatedd01.h5')

model2 = tf.keras.models.load_model('/content/drive/MyDrive/modeldensenet121updatedd02.h5')

model33.fit_generator(train_batches,validation_data=val_batches,steps_per_epoch = 199, epochs =3,callbacks=my_callbacks)

model =tf.lite.TFLiteConverter.from_keras_model('/content/drive/MyDrive/modeldensenet121new')

import torch

path = '/content/drive/MyDrive/model1new' 
torch.save(model1, path)

path = '/content/drive/MyDrive/modeldensenet121updated'
model33=torch.load(path)

del model33

model40=model33

predictions = model33.predict(x=test_batches,verbose=0)

cm = confusion_matrix(y_true=test_batches.classes,y_pred=np.argmax(predictions,axis=-1))

test_batches.class_indices

from sklearn.datasets import make_classification
from sklearn.metrics import plot_confusion_matrix

def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    print(cm)

    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, cm[i, j],
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')

cm_plot_labels = ['below 18','18to45',' above 45']
plot_confusion_matrix(cm=cm,classes=cm_plot_labels,title='Confusion matrix')

i=0
j=0
sum=0

p=cm[0][0]+cm[1][1]+cm[2][2]+cm[3][3]
for i in range(0,4):
  for j in range(0,4):
    sum=sum+cm[i][j]
accuracy=(p/sum)
print(sum)
print(accuracy)

train_path2='/content/drive/MyDrive/train_tourist'
test_path2 ='/content/drive/MyDrive/test_tourist'

train_batches2 = ImageDataGenerator(preprocessing_function=tf.keras.applications.densenet.preprocess_input ).flow_from_directory(directory=train_path2,target_size=(224,224),classes=['ain dxb','atlantis','burj al arab','burj_khalifa'],batch_size=16)
test_batches2 = ImageDataGenerator(preprocessing_function=tf.keras.applications.densenet.preprocess_input ).flow_from_directory(directory=test_path2,target_size=(224,224),classes=['ain dxb','atlantis','burj al arab','burj_khalifa'],batch_size=16,shuffle=False)

tourist_model = tf.keras.applications.DenseNet121(input_shape = (224, 224, 3),pooling=None, include_top = False, weights = 'imagenet')

for layer in tourist_model.layers:
    layer.trainable = True

from tensorflow.keras.optimizers import Adam
from tensorflow.keras import layers
y = layers.Flatten()(tourist_model.output)
y = layers.Dense(1024, activation='relu')(y)
y = layers.Dropout(0.2)(y)

# Add a final softmax layer with 4 node for classification output
y= layers.Dense(4, activation='softmax')(y)

model2 = tf.keras.models.Model(tourist_model.input, y)

model2.compile(optimizer = Adam(lr=0.0001), loss = 'categorical_crossentropy', metrics = ['acc'])

my_callbacks = [
    tf.keras.callbacks.ModelCheckpoint(filepath='/content/drive/MyDrive/modeldensenet121newtourist.{epoch:02d}.h5'),
    tf.keras.callbacks.TensorBoard(log_dir='./drive/MyDrive/modeldensenet121newtourist/logs'),
]

model2.fit_generator(train_batches2,steps_per_epoch =163, epochs =3,callbacks=my_callbacks)

predictions = model2.predict(x=test_batches2,verbose=0)

cm2 = confusion_matrix(y_true=test_batches2.classes,y_pred=np.argmax(predictions,axis=-1))

cm_plot_labels = ['ain dxb','atlantis','burj al arab','burj_khalifa']
plot_confusion_matrix(cm=cm2,classes=cm_plot_labels,title='Confusion matrix')